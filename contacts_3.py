"""## Задача 8. Контакты 3
### Что нужно сделать
Мы уже помогали Степану с реализацией телефонной книги на телефоне, однако внезапно оказалось, что книге не хватает ещё одной полезной функции: поиска.

Напишите программу, которая бесконечно запрашивает у пользователя действие, которое он хочет совершить: добавить контакт или найти человека в списке контактов по фамилии. 

Действие «добавить контакт»: программа запрашивает имя и фамилию контакта, затем номер телефона, добавляет их в словарь и выводит на экран текущий словарь контактов. Если этот человек уже есть в словаре, то выводится соответствующее сообщение.

Действие «поиск человека по фамилии»: программа запрашивает фамилию и выводит все контакты с такой фамилией и их номера телефонов. Поиск не должен зависеть от регистра символов.

Пример работы программы:
```
Введите номер действия: 
 1. Добавить контакт 
 2. Найти человека 
1
Введите имя и фамилию нового контакта (через пробел): Иван Сидоров
Введите номер телефона: 888
Текущий словарь контактов: {('Иван', 'Сидоров'): 888}
Введите номер действия: 
 1. Добавить контакт 
 2. Найти человека 
1
Введите имя и фамилию нового контакта (через пробел): Иван Сидоров
Такой человек уже есть в контактах.
Текущий словарь контактов: {('Иван', 'Сидоров'): 888}
Введите номер действия: 
 1. Добавить контакт 
 2. Найти человека 
1
Введите имя и фамилию нового контакта (через пробел): Алиса Петрова
Введите номер телефона: 999
Текущий словарь контактов: {('Иван', 'Сидоров'): 888, ('Алиса', 'Петрова'): 999}
Введите номер действия: 
 1. Добавить контакт 
 2. Найти человека 
2
Введите фамилию для поиска: Сидоров
Иван Сидоров 888
Введите номер действия: 
 1. Добавить контакт 
 2. Найти человека 
…….
```
### Что оценивается
- Результат вычислений корректен.
- input содержит корректные приглашения для ввода. 
- Формат вывода соответствует примеру.
- Основной функционал (действия) описан в отдельных функциях.
- Переменные и функции имеют значащие имена, не только a, b, c, d (подробнее об этом — в видео 2.3).
"""
def get_name():
    names = tuple(input("Введите имя и фамилию нового контакта (через пробел): "
                        ).title().split())
    if names in members_dict.keys():
        return names, True
    else:
        return names, False


def add_member(name):
    ph_number = input("Введите номер телефона: ")
    members_dict[name] = ph_number


def find_member():
    to_find = input("Введите фамилию для поиска: ").capitalize()
    for i_name in members_dict.keys():
        if to_find in i_name:
            print(f"{' '.join([str(i) for i in i_name])} : {members_dict[i_name]}")
            break
    else:
        print("Такого человека нету в книге контактов.")


members_dict = dict()    # phone book initialization

while True:    # main loop
    print("1 - Добавить контакт, 2 - Найти человека")
    action = input("Введите номер действия: ")

    if action == "1":
        names_tpl, id_exist = get_name()
        if id_exist:
            print("Такой человек уже есть в контактах.")
        else:
            add_member(names_tpl)

    elif action == "2":
        find_member()

    else:
        print("Ошибка ввода.")

    print(f"Текущий словарь контактов: {members_dict}\n")