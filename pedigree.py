"""## Задача 9. Родословная
### Что нужно сделать
В генеалогическом древе у каждого человека, кроме родоначальника, есть ровно один родитель. Каждому элементу дерева сопоставляется целое неотрицательное число, называемое высотой. У родоначальника высота равна 0, у любого другого элемента высота на один больше, чем у его родителя. Вам нужно написать программу, которая по заданному генеалогическому древу определяет высоту всех его элементов.

Программа получает на вход N количество человек в генеалогическом древе. Далее следует N − 1 строк, в каждой из которых задаётся родитель для каждого элемента дерева, кроме родоначальника. Каждая строка имеет вид «имя_потомка имя_родителя».

Программа должна вывести список всех элементов древа в лексикографическом порядке (по алфавиту). После вывода имени каждого элемента необходимо вывести его высоту.

Пример:

```
Введите количество человек: 9
Первая пара: Alexei Peter_I
Вторая пара: Anna Peter_I
Третья пара: Elizabeth Peter_I
Четвёртая пара: Peter_II Alexei
Пятая пара: Peter_III Anna
Шестая пара: Paul_I Peter_III
Седьмая пара: Alexander_I Paul_I
Восьмая пара: Nicholaus_I Paul_I

«Высота» каждого члена семьи:
Alexander_I 4
Alexei 1
Anna 1
Elizabeth 1
Nicholaus_I 4
Paul_I 3
Peter_I 0
Peter_II 2
Peter_III 2
```
### Что оценивается
- Результат вычислений корректен.
- input содержит корректные приглашения для ввода. 
- Формат вывода соответствует примеру.
- Переменные и функции имеют значащие имена, не только a, b, c, d (подробнее об этом в видео 2.3).
"""
def insert_name(relative_list):
    parent = relative_list[1]
    descendant = relative_list[0]

    if parent not in pedigree_tree.keys():
        pedigree_tree[parent] = 0

    i_depth = pedigree_tree.get(parent) + 1    # depth index of inserted name
    pedigree_tree[descendant] = i_depth


def dict_view(dict):
    print('\n«Высота» каждого члена семьи:')
    for key in sorted(dict.keys()):
        print(key, dict[key])


pairs_count = int(input('Введите количество человек: '))
pedigree_tree = dict()
for i_pair in range(1, pairs_count):
    pair = input(f'{i_pair} пара: ').split()
    insert_name(pair)

dict_view(pedigree_tree)