"""## Задача 6. Совместное проживание 2
### Что нужно сделать
Артём увлёкся предыдущим экспериментом и решил расширить его, создав целую семью из Мужа, Жены и Кота. Условия эксперимента следующие.

Каждый день участники жизни могут делать только одно действие. Все вместе они должны прожить год и не умереть.

Муж может:

- есть;
- играть;
- ходить на работу.

Жена может:

- есть;
- покупать продукты;
- покупать шубу;
- убираться в доме.

Кот может:

- есть;
- спать;
- драть обои.

Все они живут в одном доме, дом характеризуется:

- количеством денег в тумбочке (вначале 100);
- количеством еды в холодильнике (вначале 50);
- едой для кота (вначале 30);
- количеством грязи (вначале 0).

У людей есть имя, степень сытости (вначале 30) и степень счастья (вначале 100). Все люди могут гладить кота (+5 к счастью).

У кота есть имя и степень сытости (вначале 30).

Любое действие (в том числе и кота), кроме «есть», приводит к уменьшению степени сытости на 10 пунктов.

Взрослые едят максимум по 30 единиц еды, степень сытости растёт на один пункт за один пункт еды.

Кот ест максимум по 10 единиц еды, степень сытости растёт на два пункта за один пункт еды.

Степень сытости не должна падать ниже нуля, иначе человек или кот умрёт от голода.

Деньги в тумбочку добавляет муж после работы — сразу 150 единиц.

Еда стоит 10 денег за 10 единиц еды. Шуба стоит 350 единиц.

Еда для кота тоже покупается — за 10 денег 10 еды.

Грязь добавляется каждый день по пять пунктов, за одну уборку жена может убирать до 100 единиц грязи.

Если кот дерёт обои, то грязи тоже становится больше на пять пунктов.

Если в доме грязи больше 90, у людей падает степень счастья каждый день на 10 пунктов.

Степень счастья растёт: у мужа от игры в компьютер (на 20), у жены от покупки шубы (на 60, но шуба дорогая).

Степень счастья не должна падать ниже 10, иначе человек умирает от депрессии.

Реализуйте такую программу. Подведите итоги жизни за год — сколько было заработано денег, сколько съедено еды, сколько куплено шуб.

Дополнительно: добавьте ещё ребёнка и несколько котов.
### Что оценивается
- Результат вычислений корректен.
- Модели реализованы в стиле ООП, основной функционал описан в методах классов и в отдельных функциях.
- При написании классов соблюдаются основные принципы ООП: инкапсуляция, наследование и полиморфизм.
  - Для получения и установки значений у приватных атрибутов используются сеттеры и геттеры.
  - Для создания нового класса на основе уже существующего используется наследование.
- Сообщения о процессе получения результата осмыслены и понятны для пользователя.
- Переменные, функции и собственные методы классов имеют значащие имена, а не `a`, `b`, `c`, `d`.
- Классы и методы/функции имеют прописанную документацию.

"""
import family

"""
stats (dict): словарь для сохранения статистики
Ниже представлены алгоритмы поведения с сохранением статистики
"""


def one_year(home: family.House, *members):
    """
    Имитация года жизни, вызывает функции поведения представленные выше,
    создает сет для каждого типа жильца и вызывает алгоритм его поведения 365 раз,
    выходит из цикла в случае смерти жильца

    :type home: (family.House)
    :type members: (family.Husband | family.Wife | family.Child | family.Cat)
    :return: None
    """
    mans, women, cats, children = set(), set(), set(), set()

    for member in members:
        if isinstance(member, family.Husband):
            mans.add(member)
        if isinstance(member, family.Wife):
            women.add(member)
        if isinstance(member, family.Cat):
            cats.add(member)
        if isinstance(member, family.Child):
            children.add(member)

    for day in range(1, 366):
        for member in mans:
            member.act(stats)
            if member.home.dirt > 90:
                member.happy -= 10
        for member in women:
            member.act(stats)
            if member.home.dirt > 90:
                member.happy -= 10
        for member in cats:
            member.act()
        for member in children:
            member.act()
        for member in [*mans, *women, *cats, *children]:
            if member.self_check():
                print(f'Дней прожитых без смертей: {day}')
                return
        home.dirt += 5
    print(f'Итоги года:'
          f'\nСьедено еды: {stats.get("total_eaten")}'
          f'\nЗаработано денег: {stats.get("total_earn")}'
          f'\nКуплено шуб: {stats.get("total_coats")}')


stats = {
    'total_earn': 0,
    'total_coats': 0,
    'total_eaten': 0
}

house = family.House()
cat = family.Cat('Star', house)
man = family.Husband('Vasya', house)
women = family.Wife('Katy', house)
child = family.Child('Viktor', house, women, man)

one_year(house, cat, man, women)
